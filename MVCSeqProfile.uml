<?xml version="1.0" encoding="UTF-8"?>
<uml:Profile xmi:version="2.1" xmlns:xmi="http://schema.omg.org/spec/XMI/2.1" xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore" xmlns:uml="http://www.eclipse.org/uml2/3.0.0/UML" xmi:id="_43vpgFeBEd6PrsI4sxIG7w" name="MVCSeq" metaclassReference="_KJXJAFeHEd6PrsI4sxIG7w _KJXwEFeHEd6PrsI4sxIG7w">
  <eAnnotations xmi:id="_ANaLUFeJEd6PrsI4sxIG7w" source="http://www.eclipse.org/uml2/2.0.0/UML">
    <contents xmi:type="ecore:EPackage" xmi:id="_uJXcUIeGEd60tKiFLuPNpg" name="MVCSeq" nsURI="http:///schemas/MVCSeq/_uJW1QIeGEd60tKiFLuPNpg/3" nsPrefix="MVCSeq">
      <eAnnotations xmi:id="_uJXcUYeGEd60tKiFLuPNpg" source="http://www.eclipse.org/emf/2002/GenModel">
        <details xmi:id="_uJXcUoeGEd60tKiFLuPNpg" key="documentation" value="Lifeline.allInstances()->exists(lifeline|(lifeline.getAppliedStereotypes()->collect(name)->includes('ViewDataPInstance')))&#xA;Lifeline.allInstances()->exists(lifeline|(lifeline.getAppliedStereotypes()->collect(name)->includes('ModelDataPInstance')) and not (lifeline.getAppliedStereotypes()->collect(name)->includes('ViewDataPInstance')))&#xA;Lifeline.allInstances()->exists(lifeline|(lifeline.getAppliedStereotypes()->collect(name)->includes('ControlUpdatePInstance')) and not (lifeline.getAppliedStereotypes()->collect(name)->includes('ViewDataPInstance')) and not (lifeline.getAppliedStereotypes()->collect(name)->includes('ModelDataPInstance')))&#xA;Lifeline.allInstances()->exists(lifeline|(lifeline.getAppliedStereotypes()->collect(name)->includes('ViewUpdatePInstance')) and not (lifeline.getAppliedStereotypes()->collect(name)->includes('ViewDataPInstance')) and not (lifeline.getAppliedStereotypes()->collect(name)->includes('ModelDataPInstance')) and not (lifeline.getAppliedStereotypes()->collect(name)->includes('ControlUpdatePInstance')))&#xA;Lifeline.allInstances()->exists(lifeline|(lifeline.getAppliedStereotypes()->collect(name)->includes('ControlCommandPInstance')) and not (lifeline.getAppliedStereotypes()->collect(name)->includes('ViewDataPInstance')) and not (lifeline.getAppliedStereotypes()->collect(name)->includes('ModelDataPInstance')) and not (lifeline.getAppliedStereotypes()->collect(name)->includes('ControlUpdatePInstance')) and not (lifeline.getAppliedStereotypes()->collect(name)->includes('ViewUpdatePInstance')))&#xA;Lifeline.allInstances()->exists(lifeline|(lifeline.getAppliedStereotypes()->collect(name)->includes('ModelCommandPInstance')) and not (lifeline.getAppliedStereotypes()->collect(name)->includes('ViewDataPInstance')) and not (lifeline.getAppliedStereotypes()->collect(name)->includes('ModelDataPInstance')) and not (lifeline.getAppliedStereotypes()->collect(name)->includes('ControlUpdatePInstance')) and not (lifeline.getAppliedStereotypes()->collect(name)->includes('ViewUpdatePInstance')) and not (lifeline.getAppliedStereotypes()->collect(name)->includes('ControlCommandPInstance')))&#xA;Message.allInstances()->exists(message|(message.getAppliedStereotypes()->collect(name)->includes('DataMessage')))&#xA;Message.allInstances()->exists(message|(message.getAppliedStereotypes()->collect(name)->includes('DataMessage')) and message.sendEvent->size() = 1 and message.receiveEvent->size() = 1)&#xA;Message.allInstances().sendEvent->exists(m|m->collect(message)->select(mess|mess.getAppliedStereotypes()->collect(name)->includes('DataMessage'))->notEmpty() and m->collect(mend|mend.oclAsType(InteractionFragment)->collect(covered))->select(ll|ll.getAppliedStereotypes()->collect(name)->includes('ViewDataPInstance'))->notEmpty())&#xA;Message.allInstances().receiveEvent->exists(m|m->collect(message)->select(mess|mess.getAppliedStereotypes()->collect(name)->includes('DataMessage'))->notEmpty() and m->collect(mend|mend.oclAsType(InteractionFragment)->collect(covered))->select(ll|ll.getAppliedStereotypes()->collect(name)->includes('ModelDataPInstance'))->notEmpty())&#xA;Message.allInstances()->exists(message|(message.getAppliedStereotypes()->collect(name)->includes('UpdateMessage')))&#xA;Message.allInstances()->exists(message|(message.getAppliedStereotypes()->collect(name)->includes('UpdateMessage')) and message.sendEvent->size() = 1 and message.receiveEvent->size() = 1)&#xA;Message.allInstances().sendEvent->exists(m|m->collect(message)->select(mess|mess.getAppliedStereotypes()->collect(name)->includes('UpdateMessage'))->notEmpty() and m->collect(mend|mend.oclAsType(InteractionFragment)->collect(covered))->select(ll|ll.getAppliedStereotypes()->collect(name)->includes('ControlUpdatePInstance'))->notEmpty())&#xA;Message.allInstances().receiveEvent->exists(m|m->collect(message)->select(mess|mess.getAppliedStereotypes()->collect(name)->includes('UpdateMessage'))->notEmpty() and m->collect(mend|mend.oclAsType(InteractionFragment)->collect(covered))->select(ll|ll.getAppliedStereotypes()->collect(name)->includes('ViewUpdatePInstance'))->notEmpty())&#xA;Message.allInstances()->exists(message|(message.getAppliedStereotypes()->collect(name)->includes('CommandMessage')))&#xA;Message.allInstances()->exists(message|(message.getAppliedStereotypes()->collect(name)->includes('CommandMessage')) and message.sendEvent->size() = 1 and message.receiveEvent->size() = 1)&#xA;Message.allInstances().sendEvent->exists(m|m->collect(message)->select(mess|mess.getAppliedStereotypes()->collect(name)->includes('CommandMessage'))->notEmpty() and m->collect(mend|mend.oclAsType(InteractionFragment)->collect(covered))->select(ll|ll.getAppliedStereotypes()->collect(name)->includes('ControlCommandPInstance'))->notEmpty())&#xA;Message.allInstances().receiveEvent->exists(m|m->collect(message)->select(mess|mess.getAppliedStereotypes()->collect(name)->includes('CommandMessage'))->notEmpty() and m->collect(mend|mend.oclAsType(InteractionFragment)->collect(covered))->select(ll|ll.getAppliedStereotypes()->collect(name)->includes('ModelCommandPInstance'))->notEmpty())&#xA;let occurrs : Bag(InteractionFragment) = Lifeline.allInstances()->select(let stereos1 : Bag(String) = getAppliedStereotypes()->collect(name) in stereos1->includes('ControlUpdatePInstance') or stereos1->includes('ViewUpdatePInstance') or stereos1->includes('ControlCommandPInstance') or stereos1->includes('ModelCommandPInstance'))->collect(coveredBy), mend : Bag(InteractionFragment) = Lifeline.allInstances()->select(let stereos2 : Bag(String) = getAppliedStereotypes()->collect(name) in stereos2->includes('ViewDataPInstance'))->collect(coveredBy) in not Message.allInstances()->exists(mess|mend->exists(nm1|mess.sendEvent.oclAsType(InteractionFragment)->includes(nm1)) and occurrs->exists(nm2|mess.receiveEvent.oclAsType(InteractionFragment)->includes(nm2))) and not Message.allInstances()->exists(mess|mend->exists(nm3|mess.receiveEvent.oclAsType(InteractionFragment)->includes(nm3)) and occurrs->exists(nm4|mess.sendEvent.oclAsType(InteractionFragment)->includes(nm4)))&#xA;let occurrs : Bag(InteractionFragment) = Lifeline.allInstances()->select(let stereos1 : Bag(String) = getAppliedStereotypes()->collect(name) in stereos1->includes('ControlUpdatePInstance') or stereos1->includes('ViewUpdatePInstance') or stereos1->includes('ControlCommandPInstance') or stereos1->includes('ModelCommandPInstance'))->collect(coveredBy), mend : Bag(InteractionFragment) = Lifeline.allInstances()->select(let stereos2 : Bag(String) = getAppliedStereotypes()->collect(name) in stereos2->includes('ModelDataPInstance'))->collect(coveredBy) in not Message.allInstances()->exists(mess|mend->exists(nm1|mess.sendEvent.oclAsType(InteractionFragment)->includes(nm1)) and occurrs->exists(nm2|mess.receiveEvent.oclAsType(InteractionFragment)->includes(nm2))) and not Message.allInstances()->exists(mess|mend->exists(nm3|mess.receiveEvent.oclAsType(InteractionFragment)->includes(nm3)) and occurrs->exists(nm4|mess.sendEvent.oclAsType(InteractionFragment)->includes(nm4)))&#xA;let occurrs : Bag(InteractionFragment) = Lifeline.allInstances()->select(let stereos1 : Bag(String) = getAppliedStereotypes()->collect(name) in stereos1->includes('ViewDataPInstance') or stereos1->includes('ModelDataPInstance') or stereos1->includes('ControlCommandPInstance') or stereos1->includes('ModelCommandPInstance'))->collect(coveredBy), mend : Bag(InteractionFragment) = Lifeline.allInstances()->select(let stereos2 : Bag(String) = getAppliedStereotypes()->collect(name) in stereos2->includes('ControlUpdatePInstance'))->collect(coveredBy) in not Message.allInstances()->exists(mess|mend->exists(nm1|mess.sendEvent.oclAsType(InteractionFragment)->includes(nm1)) and occurrs->exists(nm2|mess.receiveEvent.oclAsType(InteractionFragment)->includes(nm2))) and not Message.allInstances()->exists(mess|mend->exists(nm3|mess.receiveEvent.oclAsType(InteractionFragment)->includes(nm3)) and occurrs->exists(nm4|mess.sendEvent.oclAsType(InteractionFragment)->includes(nm4)))&#xA;let occurrs : Bag(InteractionFragment) = Lifeline.allInstances()->select(let stereos1 : Bag(String) = getAppliedStereotypes()->collect(name) in stereos1->includes('ViewDataPInstance') or stereos1->includes('ModelDataPInstance') or stereos1->includes('ControlCommandPInstance') or stereos1->includes('ModelCommandPInstance'))->collect(coveredBy), mend : Bag(InteractionFragment) = Lifeline.allInstances()->select(let stereos2 : Bag(String) = getAppliedStereotypes()->collect(name) in stereos2->includes('ViewUpdatePInstance'))->collect(coveredBy) in not Message.allInstances()->exists(mess|mend->exists(nm1|mess.sendEvent.oclAsType(InteractionFragment)->includes(nm1)) and occurrs->exists(nm2|mess.receiveEvent.oclAsType(InteractionFragment)->includes(nm2))) and not Message.allInstances()->exists(mess|mend->exists(nm3|mess.receiveEvent.oclAsType(InteractionFragment)->includes(nm3)) and occurrs->exists(nm4|mess.sendEvent.oclAsType(InteractionFragment)->includes(nm4)))&#xA;let occurrs : Bag(InteractionFragment) = Lifeline.allInstances()->select(let stereos1 : Bag(String) = getAppliedStereotypes()->collect(name) in stereos1->includes('ViewDataPInstance') or stereos1->includes('ModelDataPInstance') or stereos1->includes('ControlUpdatePInstance') or stereos1->includes('ViewUpdatePInstance'))->collect(coveredBy), mend : Bag(InteractionFragment) = Lifeline.allInstances()->select(let stereos2 : Bag(String) = getAppliedStereotypes()->collect(name) in stereos2->includes('ControlCommandPInstance'))->collect(coveredBy) in not Message.allInstances()->exists(mess|mend->exists(nm1|mess.sendEvent.oclAsType(InteractionFragment)->includes(nm1)) and occurrs->exists(nm2|mess.receiveEvent.oclAsType(InteractionFragment)->includes(nm2))) and not Message.allInstances()->exists(mess|mend->exists(nm3|mess.receiveEvent.oclAsType(InteractionFragment)->includes(nm3)) and occurrs->exists(nm4|mess.sendEvent.oclAsType(InteractionFragment)->includes(nm4)))&#xA;let occurrs : Bag(InteractionFragment) = Lifeline.allInstances()->select(let stereos1 : Bag(String) = getAppliedStereotypes()->collect(name) in stereos1->includes('ViewDataPInstance') or stereos1->includes('ModelDataPInstance') or stereos1->includes('ControlUpdatePInstance') or stereos1->includes('ViewUpdatePInstance'))->collect(coveredBy), mend : Bag(InteractionFragment) = Lifeline.allInstances()->select(let stereos2 : Bag(String) = getAppliedStereotypes()->collect(name) in stereos2->includes('ModelCommandPInstance'))->collect(coveredBy) in not Message.allInstances()->exists(mess|mend->exists(nm1|mess.sendEvent.oclAsType(InteractionFragment)->includes(nm1)) and occurrs->exists(nm2|mess.receiveEvent.oclAsType(InteractionFragment)->includes(nm2))) and not Message.allInstances()->exists(mess|mend->exists(nm3|mess.receiveEvent.oclAsType(InteractionFragment)->includes(nm3)) and occurrs->exists(nm4|mess.sendEvent.oclAsType(InteractionFragment)->includes(nm4)))"/>
      </eAnnotations>
      <eClassifiers xmi:type="ecore:EClass" xmi:id="_uJXcU4eGEd60tKiFLuPNpg" name="ViewDataPInstance">
        <eAnnotations xmi:id="_uJXcVIeGEd60tKiFLuPNpg" source="http://www.eclipse.org/uml2/2.0.0/UML" references="_RkVfEFeCEd6PrsI4sxIG7w"/>
        <eStructuralFeatures xmi:type="ecore:EReference" xmi:id="_uJXcVYeGEd60tKiFLuPNpg" name="base_Lifeline" ordered="false" lowerBound="1">
          <eType xmi:type="ecore:EClass" href="http://www.eclipse.org/uml2/3.0.0/UML#//Lifeline"/>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xmi:type="ecore:EClass" xmi:id="_uJXcV4eGEd60tKiFLuPNpg" name="ModelDataPInstance">
        <eAnnotations xmi:id="_uJXcWIeGEd60tKiFLuPNpg" source="http://www.eclipse.org/uml2/2.0.0/UML" references="_RkVfEVeCEd6PrsI4sxIG7w"/>
        <eStructuralFeatures xmi:type="ecore:EReference" xmi:id="_uJXcWYeGEd60tKiFLuPNpg" name="base_Lifeline" ordered="false" lowerBound="1">
          <eType xmi:type="ecore:EClass" href="http://www.eclipse.org/uml2/3.0.0/UML#//Lifeline"/>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xmi:type="ecore:EClass" xmi:id="_uJXcW4eGEd60tKiFLuPNpg" name="ViewUpdatePInstance">
        <eAnnotations xmi:id="_uJXcXIeGEd60tKiFLuPNpg" source="http://www.eclipse.org/uml2/2.0.0/UML" references="_RkVfEleCEd6PrsI4sxIG7w"/>
        <eStructuralFeatures xmi:type="ecore:EReference" xmi:id="_uJXcXYeGEd60tKiFLuPNpg" name="base_Lifeline" ordered="false" lowerBound="1">
          <eType xmi:type="ecore:EClass" href="http://www.eclipse.org/uml2/3.0.0/UML#//Lifeline"/>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xmi:type="ecore:EClass" xmi:id="_uJXcX4eGEd60tKiFLuPNpg" name="ControlUpdatePInstance">
        <eAnnotations xmi:id="_uJXcYIeGEd60tKiFLuPNpg" source="http://www.eclipse.org/uml2/2.0.0/UML" references="_R0bwkFeCEd6PrsI4sxIG7w"/>
        <eStructuralFeatures xmi:type="ecore:EReference" xmi:id="_uJXcYYeGEd60tKiFLuPNpg" name="base_Lifeline" ordered="false" lowerBound="1">
          <eType xmi:type="ecore:EClass" href="http://www.eclipse.org/uml2/3.0.0/UML#//Lifeline"/>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xmi:type="ecore:EClass" xmi:id="_uJXcY4eGEd60tKiFLuPNpg" name="ControlCommandPInstance">
        <eAnnotations xmi:id="_uJXcZIeGEd60tKiFLuPNpg" source="http://www.eclipse.org/uml2/2.0.0/UML" references="_R0bwkVeCEd6PrsI4sxIG7w"/>
        <eStructuralFeatures xmi:type="ecore:EReference" xmi:id="_uJXcZYeGEd60tKiFLuPNpg" name="base_Lifeline" ordered="false" lowerBound="1">
          <eType xmi:type="ecore:EClass" href="http://www.eclipse.org/uml2/3.0.0/UML#//Lifeline"/>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xmi:type="ecore:EClass" xmi:id="_uJXcZ4eGEd60tKiFLuPNpg" name="ModelCommandPInstance">
        <eAnnotations xmi:id="_uJXcaIeGEd60tKiFLuPNpg" source="http://www.eclipse.org/uml2/2.0.0/UML" references="_R0bwkleCEd6PrsI4sxIG7w"/>
        <eStructuralFeatures xmi:type="ecore:EReference" xmi:id="_uJXcaYeGEd60tKiFLuPNpg" name="base_Lifeline" ordered="false" lowerBound="1">
          <eType xmi:type="ecore:EClass" href="http://www.eclipse.org/uml2/3.0.0/UML#//Lifeline"/>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xmi:type="ecore:EClass" xmi:id="_uJXca4eGEd60tKiFLuPNpg" name="DataMessage">
        <eAnnotations xmi:id="_uJXcbIeGEd60tKiFLuPNpg" source="http://www.eclipse.org/uml2/2.0.0/UML" references="_SZm6MFeCEd6PrsI4sxIG7w"/>
        <eStructuralFeatures xmi:type="ecore:EReference" xmi:id="_uJXcbYeGEd60tKiFLuPNpg" name="base_Message" ordered="false" lowerBound="1">
          <eType xmi:type="ecore:EClass" href="http://www.eclipse.org/uml2/3.0.0/UML#//Message"/>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xmi:type="ecore:EClass" xmi:id="_uJXcb4eGEd60tKiFLuPNpg" name="UpdateMessage">
        <eAnnotations xmi:id="_uJXccIeGEd60tKiFLuPNpg" source="http://www.eclipse.org/uml2/2.0.0/UML" references="_Sr5kEFeCEd6PrsI4sxIG7w"/>
        <eStructuralFeatures xmi:type="ecore:EReference" xmi:id="_uJXccYeGEd60tKiFLuPNpg" name="base_Message" ordered="false" lowerBound="1">
          <eType xmi:type="ecore:EClass" href="http://www.eclipse.org/uml2/3.0.0/UML#//Message"/>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xmi:type="ecore:EClass" xmi:id="_uJXcc4eGEd60tKiFLuPNpg" name="CommandMessage">
        <eAnnotations xmi:id="_uJXcdIeGEd60tKiFLuPNpg" source="http://www.eclipse.org/uml2/2.0.0/UML" references="_frSLoFeCEd6PrsI4sxIG7w"/>
        <eStructuralFeatures xmi:type="ecore:EReference" xmi:id="_uJXcdYeGEd60tKiFLuPNpg" name="base_Message" ordered="false" lowerBound="1">
          <eType xmi:type="ecore:EClass" href="http://www.eclipse.org/uml2/3.0.0/UML#//Message"/>
        </eStructuralFeatures>
      </eClassifiers>
    </contents>
    <contents xmi:type="ecore:EPackage" xmi:id="_PkCRwIeGEd60tKiFLuPNpg" name="MVCSeq" nsURI="http:///schemas/MVCSeq/_Pj_OcIeGEd60tKiFLuPNpg/2" nsPrefix="MVCSeq">
      <eAnnotations xmi:id="_PkCRwYeGEd60tKiFLuPNpg" source="http://www.eclipse.org/emf/2002/GenModel">
        <details xmi:id="_PkCRwoeGEd60tKiFLuPNpg" key="documentation" value="Lifeline.allInstances()->exists(lifeline|(lifeline.getAppliedStereotypes()->collect(name)->includes('ViewDataPInstance')))&#xA;Lifeline.allInstances()->exists(lifeline|(lifeline.getAppliedStereotypes()->collect(name)->includes('ModelDataPInstance')) and not (lifeline.getAppliedStereotypes()->collect(name)->includes('ViewDataPInstance')))&#xA;Lifeline.allInstances()->exists(lifeline|(lifeline.getAppliedStereotypes()->collect(name)->includes('ControlUpdatePInstance')) and not (lifeline.getAppliedStereotypes()->collect(name)->includes('ViewDataPInstance')) and not (lifeline.getAppliedStereotypes()->collect(name)->includes('ModelDataPInstance')))&#xA;Lifeline.allInstances()->exists(lifeline|(lifeline.getAppliedStereotypes()->collect(name)->includes('ViewUpdatePInstance')) and not (lifeline.getAppliedStereotypes()->collect(name)->includes('ViewDataPInstance')) and not (lifeline.getAppliedStereotypes()->collect(name)->includes('ModelDataPInstance')) and not (lifeline.getAppliedStereotypes()->collect(name)->includes('ControlUpdatePInstance')))&#xA;Lifeline.allInstances()->exists(lifeline|(lifeline.getAppliedStereotypes()->collect(name)->includes('ControlCommandPInstance')) and not (lifeline.getAppliedStereotypes()->collect(name)->includes('ViewDataPInstance')) and not (lifeline.getAppliedStereotypes()->collect(name)->includes('ModelDataPInstance')) and not (lifeline.getAppliedStereotypes()->collect(name)->includes('ControlUpdatePInstance')) and not (lifeline.getAppliedStereotypes()->collect(name)->includes('ViewUpdatePInstance')))&#xA;Lifeline.allInstances()->exists(lifeline|(lifeline.getAppliedStereotypes()->collect(name)->includes('ModelCommandPInstance')) and not (lifeline.getAppliedStereotypes()->collect(name)->includes('ViewDataPInstance')) and not (lifeline.getAppliedStereotypes()->collect(name)->includes('ModelDataPInstance')) and not (lifeline.getAppliedStereotypes()->collect(name)->includes('ControlUpdatePInstance')) and not (lifeline.getAppliedStereotypes()->collect(name)->includes('ViewUpdatePInstance')) and not (lifeline.getAppliedStereotypes()->collect(name)->includes('ControlCommandPInstance')))&#xA;Message.allInstances()->exists(message|(message.getAppliedStereotypes()->collect(name)->includes('DataMessage')))&#xA;Message.allInstances()->exists(message|(message.getAppliedStereotypes()->collect(name)->includes('DataMessage')) and message.sendEvent->size() = 1 and message.receiveEvent->size() = 1)&#xA;Message.allInstances().sendEvent->exists(m|m->collect(message)->select(mess|mess.getAppliedStereotypes()->collect(name)->includes('DataMessage'))->notEmpty() and m->collect(mend|mend.oclAsType(InteractionFragment)->collect(covered))->select(ll|ll.getAppliedStereotypes()->collect(name)->includes('ViewDataPInstance'))->notEmpty())&#xA;Message.allInstances().receiveEvent->exists(m|m->collect(message)->select(mess|mess.getAppliedStereotypes()->collect(name)->includes('DataMessage'))->notEmpty() and m->collect(mend|mend.oclAsType(InteractionFragment)->collect(covered))->select(ll|ll.getAppliedStereotypes()->collect(name)->includes('ModelDataPInstance'))->notEmpty())&#xA;Message.allInstances()->exists(message|(message.getAppliedStereotypes()->collect(name)->includes('UpdateMessage')))&#xA;Message.allInstances()->exists(message|(message.getAppliedStereotypes()->collect(name)->includes('UpdateMessage')) and message.sendEvent->size() = 1 and message.receiveEvent->size() = 1)&#xA;Message.allInstances().sendEvent->exists(m|m->collect(message)->select(mess|mess.getAppliedStereotypes()->collect(name)->includes('UpdateMessage'))->notEmpty() and m->collect(mend|mend.oclAsType(InteractionFragment)->collect(covered))->select(ll|ll.getAppliedStereotypes()->collect(name)->includes('ControlUpdatePInstance'))->notEmpty())&#xA;Message.allInstances().receiveEvent->exists(m|m->collect(message)->select(mess|mess.getAppliedStereotypes()->collect(name)->includes('UpdateMessage'))->notEmpty() and m->collect(mend|mend.oclAsType(InteractionFragment)->collect(covered))->select(ll|ll.getAppliedStereotypes()->collect(name)->includes('ViewUpdatePInstance'))->notEmpty())&#xA;Message.allInstances()->exists(message|(message.getAppliedStereotypes()->collect(name)->includes('CommandMessage')))&#xA;Message.allInstances()->exists(message|(message.getAppliedStereotypes()->collect(name)->includes('CommandMessage')) and message.sendEvent->size() = 1 and message.receiveEvent->size() = 1)&#xA;Message.allInstances().sendEvent->exists(m|m->collect(message)->select(mess|mess.getAppliedStereotypes()->collect(name)->includes('CommandMessage'))->notEmpty() and m->collect(mend|mend.oclAsType(InteractionFragment)->collect(covered))->select(ll|ll.getAppliedStereotypes()->collect(name)->includes('ControlCommandPInstance'))->notEmpty())&#xA;Message.allInstances().receiveEvent->exists(m|m->collect(message)->select(mess|mess.getAppliedStereotypes()->collect(name)->includes('CommandMessage'))->notEmpty() and m->collect(mend|mend.oclAsType(InteractionFragment)->collect(covered))->select(ll|ll.getAppliedStereotypes()->collect(name)->includes('ModelCommandPInstance'))->notEmpty())&#xA;let occurrs : Bag(InteractionFragment) = Lifeline.allInstances()->select(let stereos1 : Bag(String) = getAppliedStereotypes()->collect(name) in stereos1->includes('ControlUpdatePInstance') or stereos1->includes('ViewUpdatePInstance') or stereos1->includes('ControlCommandPInstance') or stereos1->includes('ModelCommandPInstance'))->collect(coveredBy), mend : Bag(InteractionFragment) = Lifeline.allInstances()->select(let stereos2 : Bag(String) = getAppliedStereotypes()->collect(name) in stereos2->includes('ViewDataPInstance'))->collect(coveredBy) in not Message.allInstances()->exists(mess|mend->exists(nm1|mess.sendEvent.oclAsType(InteractionFragment)->includes(nm1)) and occurrs->exists(nm2|mess.receiveEvent.oclAsType(InteractionFragment)->includes(nm2))) and not Message.allInstances()->exists(mess|mend->exists(nm3|mess.receiveEvent.oclAsType(InteractionFragment)->includes(nm3)) and occurrs->exists(nm4|mess.sendEvent.oclAsType(InteractionFragment)->includes(nm4)))&#xA;let occurrs : Bag(InteractionFragment) = Lifeline.allInstances()->select(let stereos1 : Bag(String) = getAppliedStereotypes()->collect(name) in stereos1->includes('ControlUpdatePInstance') or stereos1->includes('ViewUpdatePInstance') or stereos1->includes('ControlCommandPInstance') or stereos1->includes('ModelCommandPInstance'))->collect(coveredBy), mend : Bag(InteractionFragment) = Lifeline.allInstances()->select(let stereos2 : Bag(String) = getAppliedStereotypes()->collect(name) in stereos2->includes('ModelDataPInstance'))->collect(coveredBy) in not Message.allInstances()->exists(mess|mend->exists(nm1|mess.sendEvent.oclAsType(InteractionFragment)->includes(nm1)) and occurrs->exists(nm2|mess.receiveEvent.oclAsType(InteractionFragment)->includes(nm2))) and not Message.allInstances()->exists(mess|mend->exists(nm3|mess.receiveEvent.oclAsType(InteractionFragment)->includes(nm3)) and occurrs->exists(nm4|mess.sendEvent.oclAsType(InteractionFragment)->includes(nm4)))&#xA;let occurrs : Bag(InteractionFragment) = Lifeline.allInstances()->select(let stereos1 : Bag(String) = getAppliedStereotypes()->collect(name) in stereos1->includes('ViewDataPInstance') or stereos1->includes('ModelDataPInstance') or stereos1->includes('ControlCommandPInstance') or stereos1->includes('ModelCommandPInstance'))->collect(coveredBy), mend : Bag(InteractionFragment) = Lifeline.allInstances()->select(let stereos2 : Bag(String) = getAppliedStereotypes()->collect(name) in stereos2->includes('ControlUpdatePInstance'))->collect(coveredBy) in not Message.allInstances()->exists(mess|mend->exists(nm1|mess.sendEvent.oclAsType(InteractionFragment)->includes(nm1)) and occurrs->exists(nm2|mess.receiveEvent.oclAsType(InteractionFragment)->includes(nm2))) and not Message.allInstances()->exists(mess|mend->exists(nm3|mess.receiveEvent.oclAsType(InteractionFragment)->includes(nm3)) and occurrs->exists(nm4|mess.sendEvent.oclAsType(InteractionFragment)->includes(nm4)))&#xA;let occurrs : Bag(InteractionFragment) = Lifeline.allInstances()->select(let stereos1 : Bag(String) = getAppliedStereotypes()->collect(name) in stereos1->includes('ViewDataPInstance') or stereos1->includes('ModelDataPInstance') or stereos1->includes('ControlCommandPInstance') or stereos1->includes('ModelCommandPInstance'))->collect(coveredBy), mend : Bag(InteractionFragment) = Lifeline.allInstances()->select(let stereos2 : Bag(String) = getAppliedStereotypes()->collect(name) in stereos2->includes('ViewUpdatePInstance'))->collect(coveredBy) in not Message.allInstances()->exists(mess|mend->exists(nm1|mess.sendEvent.oclAsType(InteractionFragment)->includes(nm1)) and occurrs->exists(nm2|mess.receiveEvent.oclAsType(InteractionFragment)->includes(nm2))) and not Message.allInstances()->exists(mess|mend->exists(nm3|mess.receiveEvent.oclAsType(InteractionFragment)->includes(nm3)) and occurrs->exists(nm4|mess.sendEvent.oclAsType(InteractionFragment)->includes(nm4)))&#xA;let occurrs : Bag(InteractionFragment) = Lifeline.allInstances()->select(let stereos1 : Bag(String) = getAppliedStereotypes()->collect(name) in stereos1->includes('ViewDataPInstance') or stereos1->includes('ModelDataPInstance') or stereos1->includes('ControlUpdatePInstance') or stereos1->includes('ViewUpdatePInstance'))->collect(coveredBy), mend : Bag(InteractionFragment) = Lifeline.allInstances()->select(let stereos2 : Bag(String) = getAppliedStereotypes()->collect(name) in stereos2->includes('ControlCommandPInstance'))->collect(coveredBy) in not Message.allInstances()->exists(mess|mend->exists(nm1|mess.sendEvent.oclAsType(InteractionFragment)->includes(nm1)) and occurrs->exists(nm2|mess.receiveEvent.oclAsType(InteractionFragment)->includes(nm2))) and not Message.allInstances()->exists(mess|mend->exists(nm3|mess.receiveEvent.oclAsType(InteractionFragment)->includes(nm3)) and occurrs->exists(nm4|mess.sendEvent.oclAsType(InteractionFragment)->includes(nm4)))&#xA;let occurrs : Bag(InteractionFragment) = Lifeline.allInstances()->select(let stereos1 : Bag(String) = getAppliedStereotypes()->collect(name) in stereos1->includes('ViewDataPInstance') or stereos1->includes('ModelDataPInstance') or stereos1->includes('ControlUpdatePInstance') or stereos1->includes('ViewUpdatePInstance'))->collect(coveredBy), mend : Bag(InteractionFragment) = Lifeline.allInstances()->select(let stereos2 : Bag(String) = getAppliedStereotypes()->collect(name) in stereos2->includes('ModelCommandPInstance'))->collect(coveredBy) in not Message.allInstances()->exists(mess|mend->exists(nm1|mess.sendEvent.oclAsType(InteractionFragment)->includes(nm1)) and occurrs->exists(nm2|mess.receiveEvent.oclAsType(InteractionFragment)->includes(nm2))) and not Message.allInstances()->exists(mess|mend->exists(nm3|mess.receiveEvent.oclAsType(InteractionFragment)->includes(nm3)) and occurrs->exists(nm4|mess.sendEvent.oclAsType(InteractionFragment)->includes(nm4)))"/>
      </eAnnotations>
      <eClassifiers xmi:type="ecore:EClass" xmi:id="_PkCRw4eGEd60tKiFLuPNpg" name="ViewDataPInstance">
        <eAnnotations xmi:id="_PkCRxIeGEd60tKiFLuPNpg" source="http://www.eclipse.org/uml2/2.0.0/UML" references="_RkVfEFeCEd6PrsI4sxIG7w"/>
        <eStructuralFeatures xmi:type="ecore:EReference" xmi:id="_PkCRxYeGEd60tKiFLuPNpg" name="base_Lifeline" ordered="false" lowerBound="1">
          <eType xmi:type="ecore:EClass" href="http://www.eclipse.org/uml2/3.0.0/UML#//Lifeline"/>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xmi:type="ecore:EClass" xmi:id="_PkCRx4eGEd60tKiFLuPNpg" name="ModelDataPInstance">
        <eAnnotations xmi:id="_PkCRyIeGEd60tKiFLuPNpg" source="http://www.eclipse.org/uml2/2.0.0/UML" references="_RkVfEVeCEd6PrsI4sxIG7w"/>
        <eStructuralFeatures xmi:type="ecore:EReference" xmi:id="_PkCRyYeGEd60tKiFLuPNpg" name="base_Lifeline" ordered="false" lowerBound="1">
          <eType xmi:type="ecore:EClass" href="http://www.eclipse.org/uml2/3.0.0/UML#//Lifeline"/>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xmi:type="ecore:EClass" xmi:id="_PkCRy4eGEd60tKiFLuPNpg" name="ViewUpdatePInstance">
        <eAnnotations xmi:id="_PkCRzIeGEd60tKiFLuPNpg" source="http://www.eclipse.org/uml2/2.0.0/UML" references="_RkVfEleCEd6PrsI4sxIG7w"/>
        <eStructuralFeatures xmi:type="ecore:EReference" xmi:id="_PkCRzYeGEd60tKiFLuPNpg" name="base_Lifeline" ordered="false" lowerBound="1">
          <eType xmi:type="ecore:EClass" href="http://www.eclipse.org/uml2/3.0.0/UML#//Lifeline"/>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xmi:type="ecore:EClass" xmi:id="_PkCRz4eGEd60tKiFLuPNpg" name="ControlUpdatePInstance">
        <eAnnotations xmi:id="_PkCR0IeGEd60tKiFLuPNpg" source="http://www.eclipse.org/uml2/2.0.0/UML" references="_R0bwkFeCEd6PrsI4sxIG7w"/>
        <eStructuralFeatures xmi:type="ecore:EReference" xmi:id="_PkCR0YeGEd60tKiFLuPNpg" name="base_Lifeline" ordered="false" lowerBound="1">
          <eType xmi:type="ecore:EClass" href="http://www.eclipse.org/uml2/3.0.0/UML#//Lifeline"/>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xmi:type="ecore:EClass" xmi:id="_PkCR04eGEd60tKiFLuPNpg" name="ControlCommandPInstance">
        <eAnnotations xmi:id="_PkCR1IeGEd60tKiFLuPNpg" source="http://www.eclipse.org/uml2/2.0.0/UML" references="_R0bwkVeCEd6PrsI4sxIG7w"/>
        <eStructuralFeatures xmi:type="ecore:EReference" xmi:id="_PkCR1YeGEd60tKiFLuPNpg" name="base_Lifeline" ordered="false" lowerBound="1">
          <eType xmi:type="ecore:EClass" href="http://www.eclipse.org/uml2/3.0.0/UML#//Lifeline"/>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xmi:type="ecore:EClass" xmi:id="_PkCR14eGEd60tKiFLuPNpg" name="ModelCommandPInstance">
        <eAnnotations xmi:id="_PkCR2IeGEd60tKiFLuPNpg" source="http://www.eclipse.org/uml2/2.0.0/UML" references="_R0bwkleCEd6PrsI4sxIG7w"/>
        <eStructuralFeatures xmi:type="ecore:EReference" xmi:id="_PkCR2YeGEd60tKiFLuPNpg" name="base_Lifeline" ordered="false" lowerBound="1">
          <eType xmi:type="ecore:EClass" href="http://www.eclipse.org/uml2/3.0.0/UML#//Lifeline"/>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xmi:type="ecore:EClass" xmi:id="_PkCR24eGEd60tKiFLuPNpg" name="DataMessage">
        <eAnnotations xmi:id="_PkCR3IeGEd60tKiFLuPNpg" source="http://www.eclipse.org/uml2/2.0.0/UML" references="_SZm6MFeCEd6PrsI4sxIG7w"/>
        <eStructuralFeatures xmi:type="ecore:EReference" xmi:id="_PkCR3YeGEd60tKiFLuPNpg" name="base_Message" ordered="false" lowerBound="1">
          <eType xmi:type="ecore:EClass" href="http://www.eclipse.org/uml2/3.0.0/UML#//Message"/>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xmi:type="ecore:EClass" xmi:id="_PkCR34eGEd60tKiFLuPNpg" name="UpdateMessage">
        <eAnnotations xmi:id="_PkCR4IeGEd60tKiFLuPNpg" source="http://www.eclipse.org/uml2/2.0.0/UML" references="_Sr5kEFeCEd6PrsI4sxIG7w"/>
        <eStructuralFeatures xmi:type="ecore:EReference" xmi:id="_PkCR4YeGEd60tKiFLuPNpg" name="base_Message" ordered="false" lowerBound="1">
          <eType xmi:type="ecore:EClass" href="http://www.eclipse.org/uml2/3.0.0/UML#//Message"/>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xmi:type="ecore:EClass" xmi:id="_PkCR44eGEd60tKiFLuPNpg" name="CommandMessage">
        <eAnnotations xmi:id="_PkCR5IeGEd60tKiFLuPNpg" source="http://www.eclipse.org/uml2/2.0.0/UML" references="_frSLoFeCEd6PrsI4sxIG7w"/>
        <eStructuralFeatures xmi:type="ecore:EReference" xmi:id="_PkCR5YeGEd60tKiFLuPNpg" name="base_Message" ordered="false" lowerBound="1">
          <eType xmi:type="ecore:EClass" href="http://www.eclipse.org/uml2/3.0.0/UML#//Message"/>
        </eStructuralFeatures>
      </eClassifiers>
    </contents>
    <contents xmi:type="ecore:EPackage" xmi:id="_vBDVIFqKEd64wbK5K2jm8w" name="MVCSeq" nsURI="http:///schemas/MVCSeq/_vBBf8FqKEd64wbK5K2jm8w/1" nsPrefix="MVCSeq">
      <eAnnotations xmi:id="_vBDVIVqKEd64wbK5K2jm8w" source="http://www.eclipse.org/emf/2002/GenModel">
        <details xmi:id="_vBDVIlqKEd64wbK5K2jm8w" key="documentation" value="Lifeline.allInstances()->exists(lifeline|(lifeline.getAppliedStereotypes()->collect(name)->includes('ViewDataPInstance')))&#xA;Lifeline.allInstances()->exists(lifeline|(lifeline.getAppliedStereotypes()->collect(name)->includes('ModelDataPInstance')) and not (lifeline.getAppliedStereotypes()->collect(name)->includes('ViewDataPInstance')))&#xA;Lifeline.allInstances()->exists(lifeline|(lifeline.getAppliedStereotypes()->collect(name)->includes('ControlUpdatePInstance')) and not (lifeline.getAppliedStereotypes()->collect(name)->includes('ViewDataPInstance')) and not (lifeline.getAppliedStereotypes()->collect(name)->includes('ModelDataPInstance')))&#xA;Lifeline.allInstances()->exists(lifeline|(lifeline.getAppliedStereotypes()->collect(name)->includes('ViewUpdatePInstance')) and not (lifeline.getAppliedStereotypes()->collect(name)->includes('ViewDataPInstance')) and not (lifeline.getAppliedStereotypes()->collect(name)->includes('ModelDataPInstance')) and not (lifeline.getAppliedStereotypes()->collect(name)->includes('ControlUpdatePInstance')))&#xA;Lifeline.allInstances()->exists(lifeline|(lifeline.getAppliedStereotypes()->collect(name)->includes('ControlCommandPInstance')) and not (lifeline.getAppliedStereotypes()->collect(name)->includes('ViewDataPInstance')) and not (lifeline.getAppliedStereotypes()->collect(name)->includes('ModelDataPInstance')) and not (lifeline.getAppliedStereotypes()->collect(name)->includes('ControlUpdatePInstance')) and not (lifeline.getAppliedStereotypes()->collect(name)->includes('ViewUpdatePInstance')))&#xA;Lifeline.allInstances()->exists(lifeline|(lifeline.getAppliedStereotypes()->collect(name)->includes('ModelCommandPInstance')) and not (lifeline.getAppliedStereotypes()->collect(name)->includes('ViewDataPInstance')) and not (lifeline.getAppliedStereotypes()->collect(name)->includes('ModelDataPInstance')) and not (lifeline.getAppliedStereotypes()->collect(name)->includes('ControlUpdatePInstance')) and not (lifeline.getAppliedStereotypes()->collect(name)->includes('ViewUpdatePInstance')) and not (lifeline.getAppliedStereotypes()->collect(name)->includes('ControlCommandPInstance')))&#xA;Message.allInstances()->exists(message|(message.getAppliedStereotypes()->collect(name)->includes('DataMessage')))&#xA;Message.allInstances()->exists(message|(message.getAppliedStereotypes()->collect(name)->includes('DataMessage')) and message.sendEvent->size() = 1 and message.receiveEvent->size() = 1)&#xA;Message.allInstances().sendEvent->exists(m|m->collect(message)->select(mess|mess.getAppliedStereotypes()->collect(name)->includes('DataMessage'))->notEmpty() and m->collect(mend|mend.oclAsType(InteractionFragment)->collect(covered))->select(ll|ll.getAppliedStereotypes()->collect(name)->includes('ViewDataPInstance'))->notEmpty())&#xA;Message.allInstances().receiveEvent->exists(m|m->collect(message)->select(mess|mess.getAppliedStereotypes()->collect(name)->includes('DataMessage'))->notEmpty() and m->collect(mend|mend.oclAsType(InteractionFragment)->collect(covered))->select(ll|ll.getAppliedStereotypes()->collect(name)->includes('ModelDataPInstance'))->notEmpty())&#xA;Message.allInstances()->exists(message|(message.getAppliedStereotypes()->collect(name)->includes('UpdateMessage')))&#xA;Message.allInstances()->exists(message|(message.getAppliedStereotypes()->collect(name)->includes('UpdateMessage')) and message.sendEvent->size() = 1 and message.receiveEvent->size() = 1)&#xA;Message.allInstances().sendEvent->exists(m|m->collect(message)->select(mess|mess.getAppliedStereotypes()->collect(name)->includes('UpdateMessage'))->notEmpty() and m->collect(mend|mend.oclAsType(InteractionFragment)->collect(covered))->select(ll|ll.getAppliedStereotypes()->collect(name)->includes('ControlUpdatePInstance'))->notEmpty())&#xA;Message.allInstances().receiveEvent->exists(m|m->collect(message)->select(mess|mess.getAppliedStereotypes()->collect(name)->includes('UpdateMessage'))->notEmpty() and m->collect(mend|mend.oclAsType(InteractionFragment)->collect(covered))->select(ll|ll.getAppliedStereotypes()->collect(name)->includes('ViewUpdatePInstance'))->notEmpty())&#xA;Message.allInstances()->exists(message|(message.getAppliedStereotypes()->collect(name)->includes('CommandMessage')))&#xA;Message.allInstances()->exists(message|(message.getAppliedStereotypes()->collect(name)->includes('CommandMessage')) and message.sendEvent->size() = 1 and message.receiveEvent->size() = 1)&#xA;Message.allInstances().sendEvent->exists(m|m->collect(message)->select(mess|mess.getAppliedStereotypes()->collect(name)->includes('CommandMessage'))->notEmpty() and m->collect(mend|mend.oclAsType(InteractionFragment)->collect(covered))->select(ll|ll.getAppliedStereotypes()->collect(name)->includes('ControlCommandPInstance'))->notEmpty())&#xA;Message.allInstances().receiveEvent->exists(m|m->collect(message)->select(mess|mess.getAppliedStereotypes()->collect(name)->includes('CommandMessage'))->notEmpty() and m->collect(mend|mend.oclAsType(InteractionFragment)->collect(covered))->select(ll|ll.getAppliedStereotypes()->collect(name)->includes('ModelCommandPInstance'))->notEmpty())&#xA;let occurrs : Bag(InteractionFragment) = Lifeline.allInstances()->select(let stereos1 : Bag(String) = getAppliedStereotypes()->collect(name) in stereos1->includes('ControlUpdatePInstance') or stereos1->includes('ViewUpdatePInstance') or stereos1->includes('ControlCommandPInstance') or stereos1->includes('ModelCommandPInstance'))->collect(coveredBy), mend : Bag(InteractionFragment) = Lifeline.allInstances()->select(let stereos2 : Bag(String) = getAppliedStereotypes()->collect(name) in stereos2->includes('ViewDataPInstance'))->collect(coveredBy) in not Message.allInstances()->exists(mess|mend->exists(nm1|mess.sendEvent.oclAsType(InteractionFragment)->includes(nm1)) and occurrs->exists(nm2|mess.receiveEvent.oclAsType(InteractionFragment)->includes(nm2))) and not Message.allInstances()->exists(mess|mend->exists(nm3|mess.receiveEvent.oclAsType(InteractionFragment)->includes(nm3)) and occurrs->exists(nm4|mess.sendEvent.oclAsType(InteractionFragment)->includes(nm4)))&#xA;let occurrs : Bag(InteractionFragment) = Lifeline.allInstances()->select(let stereos1 : Bag(String) = getAppliedStereotypes()->collect(name) in stereos1->includes('ControlUpdatePInstance') or stereos1->includes('ViewUpdatePInstance') or stereos1->includes('ControlCommandPInstance') or stereos1->includes('ModelCommandPInstance'))->collect(coveredBy), mend : Bag(InteractionFragment) = Lifeline.allInstances()->select(let stereos2 : Bag(String) = getAppliedStereotypes()->collect(name) in stereos2->includes('ModelDataPInstance'))->collect(coveredBy) in not Message.allInstances()->exists(mess|mend->exists(nm1|mess.sendEvent.oclAsType(InteractionFragment)->includes(nm1)) and occurrs->exists(nm2|mess.receiveEvent.oclAsType(InteractionFragment)->includes(nm2))) and not Message.allInstances()->exists(mess|mend->exists(nm3|mess.receiveEvent.oclAsType(InteractionFragment)->includes(nm3)) and occurrs->exists(nm4|mess.sendEvent.oclAsType(InteractionFragment)->includes(nm4)))&#xA;let occurrs : Bag(InteractionFragment) = Lifeline.allInstances()->select(let stereos1 : Bag(String) = getAppliedStereotypes()->collect(name) in stereos1->includes('ViewDataPInstance') or stereos1->includes('ModelDataPInstance') or stereos1->includes('ControlCommandPInstance') or stereos1->includes('ModelCommandPInstance'))->collect(coveredBy), mend : Bag(InteractionFragment) = Lifeline.allInstances()->select(let stereos2 : Bag(String) = getAppliedStereotypes()->collect(name) in stereos2->includes('ControlUpdatePInstance'))->collect(coveredBy) in not Message.allInstances()->exists(mess|mend->exists(nm1|mess.sendEvent.oclAsType(InteractionFragment)->includes(nm1)) and occurrs->exists(nm2|mess.receiveEvent.oclAsType(InteractionFragment)->includes(nm2))) and not Message.allInstances()->exists(mess|mend->exists(nm3|mess.receiveEvent.oclAsType(InteractionFragment)->includes(nm3)) and occurrs->exists(nm4|mess.sendEvent.oclAsType(InteractionFragment)->includes(nm4)))&#xA;let occurrs : Bag(InteractionFragment) = Lifeline.allInstances()->select(let stereos1 : Bag(String) = getAppliedStereotypes()->collect(name) in stereos1->includes('ViewDataPInstance') or stereos1->includes('ModelDataPInstance') or stereos1->includes('ControlCommandPInstance') or stereos1->includes('ModelCommandPInstance'))->collect(coveredBy), mend : Bag(InteractionFragment) = Lifeline.allInstances()->select(let stereos2 : Bag(String) = getAppliedStereotypes()->collect(name) in stereos2->includes('ViewUpdatePInstance'))->collect(coveredBy) in not Message.allInstances()->exists(mess|mend->exists(nm1|mess.sendEvent.oclAsType(InteractionFragment)->includes(nm1)) and occurrs->exists(nm2|mess.receiveEvent.oclAsType(InteractionFragment)->includes(nm2))) and not Message.allInstances()->exists(mess|mend->exists(nm3|mess.receiveEvent.oclAsType(InteractionFragment)->includes(nm3)) and occurrs->exists(nm4|mess.sendEvent.oclAsType(InteractionFragment)->includes(nm4)))&#xA;let occurrs : Bag(InteractionFragment) = Lifeline.allInstances()->select(let stereos1 : Bag(String) = getAppliedStereotypes()->collect(name) in stereos1->includes('ViewDataPInstance') or stereos1->includes('ModelDataPInstance') or stereos1->includes('ControlUpdatePInstance') or stereos1->includes('ViewUpdatePInstance'))->collect(coveredBy), mend : Bag(InteractionFragment) = Lifeline.allInstances()->select(let stereos2 : Bag(String) = getAppliedStereotypes()->collect(name) in stereos2->includes('ControlCommandPInstance'))->collect(coveredBy) in not Message.allInstances()->exists(mess|mend->exists(nm1|mess.sendEvent.oclAsType(InteractionFragment)->includes(nm1)) and occurrs->exists(nm2|mess.receiveEvent.oclAsType(InteractionFragment)->includes(nm2))) and not Message.allInstances()->exists(mess|mend->exists(nm3|mess.receiveEvent.oclAsType(InteractionFragment)->includes(nm3)) and occurrs->exists(nm4|mess.sendEvent.oclAsType(InteractionFragment)->includes(nm4)))&#xA;let occurrs : Bag(InteractionFragment) = Lifeline.allInstances()->select(let stereos1 : Bag(String) = getAppliedStereotypes()->collect(name) in stereos1->includes('ViewDataPInstance') or stereos1->includes('ModelDataPInstance') or stereos1->includes('ControlUpdatePInstance') or stereos1->includes('ViewUpdatePInstance'))->collect(coveredBy), mend : Bag(InteractionFragment) = Lifeline.allInstances()->select(let stereos2 : Bag(String) = getAppliedStereotypes()->collect(name) in stereos2->includes('ModelCommandPInstance'))->collect(coveredBy) in not Message.allInstances()->exists(mess|mend->exists(nm1|mess.sendEvent.oclAsType(InteractionFragment)->includes(nm1)) and occurrs->exists(nm2|mess.receiveEvent.oclAsType(InteractionFragment)->includes(nm2))) and not Message.allInstances()->exists(mess|mend->exists(nm3|mess.receiveEvent.oclAsType(InteractionFragment)->includes(nm3)) and occurrs->exists(nm4|mess.sendEvent.oclAsType(InteractionFragment)->includes(nm4)))"/>
      </eAnnotations>
      <eClassifiers xmi:type="ecore:EClass" xmi:id="_vBDVI1qKEd64wbK5K2jm8w" name="ViewDataPInstance">
        <eAnnotations xmi:id="_vBDVJFqKEd64wbK5K2jm8w" source="http://www.eclipse.org/uml2/2.0.0/UML" references="_RkVfEFeCEd6PrsI4sxIG7w"/>
        <eStructuralFeatures xmi:type="ecore:EReference" xmi:id="_vBDVJVqKEd64wbK5K2jm8w" name="base_Lifeline" ordered="false" lowerBound="1">
          <eType xmi:type="ecore:EClass" href="http://www.eclipse.org/uml2/3.0.0/UML#//Lifeline"/>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xmi:type="ecore:EClass" xmi:id="_vBDVJ1qKEd64wbK5K2jm8w" name="ModelDataPInstance">
        <eAnnotations xmi:id="_vBDVKFqKEd64wbK5K2jm8w" source="http://www.eclipse.org/uml2/2.0.0/UML" references="_RkVfEVeCEd6PrsI4sxIG7w"/>
        <eStructuralFeatures xmi:type="ecore:EReference" xmi:id="_vBDVKVqKEd64wbK5K2jm8w" name="base_Lifeline" ordered="false" lowerBound="1">
          <eType xmi:type="ecore:EClass" href="http://www.eclipse.org/uml2/3.0.0/UML#//Lifeline"/>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xmi:type="ecore:EClass" xmi:id="_vBDVK1qKEd64wbK5K2jm8w" name="ViewUpdatePInstance">
        <eAnnotations xmi:id="_vBDVLFqKEd64wbK5K2jm8w" source="http://www.eclipse.org/uml2/2.0.0/UML" references="_RkVfEleCEd6PrsI4sxIG7w"/>
        <eStructuralFeatures xmi:type="ecore:EReference" xmi:id="_vBDVLVqKEd64wbK5K2jm8w" name="base_Lifeline" ordered="false" lowerBound="1">
          <eType xmi:type="ecore:EClass" href="http://www.eclipse.org/uml2/3.0.0/UML#//Lifeline"/>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xmi:type="ecore:EClass" xmi:id="_vBDVL1qKEd64wbK5K2jm8w" name="ControlUpdatePInstance">
        <eAnnotations xmi:id="_vBDVMFqKEd64wbK5K2jm8w" source="http://www.eclipse.org/uml2/2.0.0/UML" references="_R0bwkFeCEd6PrsI4sxIG7w"/>
        <eStructuralFeatures xmi:type="ecore:EReference" xmi:id="_vBDVMVqKEd64wbK5K2jm8w" name="base_Lifeline" ordered="false" lowerBound="1">
          <eType xmi:type="ecore:EClass" href="http://www.eclipse.org/uml2/3.0.0/UML#//Lifeline"/>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xmi:type="ecore:EClass" xmi:id="_vBDVM1qKEd64wbK5K2jm8w" name="ControlCommandPInstance">
        <eAnnotations xmi:id="_vBDVNFqKEd64wbK5K2jm8w" source="http://www.eclipse.org/uml2/2.0.0/UML" references="_R0bwkVeCEd6PrsI4sxIG7w"/>
        <eStructuralFeatures xmi:type="ecore:EReference" xmi:id="_vBDVNVqKEd64wbK5K2jm8w" name="base_Lifeline" ordered="false" lowerBound="1">
          <eType xmi:type="ecore:EClass" href="http://www.eclipse.org/uml2/3.0.0/UML#//Lifeline"/>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xmi:type="ecore:EClass" xmi:id="_vBDVN1qKEd64wbK5K2jm8w" name="ModelCommandPInstance">
        <eAnnotations xmi:id="_vBDVOFqKEd64wbK5K2jm8w" source="http://www.eclipse.org/uml2/2.0.0/UML" references="_R0bwkleCEd6PrsI4sxIG7w"/>
        <eStructuralFeatures xmi:type="ecore:EReference" xmi:id="_vBDVOVqKEd64wbK5K2jm8w" name="base_Lifeline" ordered="false" lowerBound="1">
          <eType xmi:type="ecore:EClass" href="http://www.eclipse.org/uml2/3.0.0/UML#//Lifeline"/>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xmi:type="ecore:EClass" xmi:id="_vBDVO1qKEd64wbK5K2jm8w" name="DataMessage">
        <eAnnotations xmi:id="_vBDVPFqKEd64wbK5K2jm8w" source="http://www.eclipse.org/uml2/2.0.0/UML" references="_SZm6MFeCEd6PrsI4sxIG7w"/>
        <eStructuralFeatures xmi:type="ecore:EReference" xmi:id="_vBDVPVqKEd64wbK5K2jm8w" name="base_Message" ordered="false" lowerBound="1">
          <eType xmi:type="ecore:EClass" href="http://www.eclipse.org/uml2/3.0.0/UML#//Message"/>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xmi:type="ecore:EClass" xmi:id="_vBDVP1qKEd64wbK5K2jm8w" name="UpdateMessage">
        <eAnnotations xmi:id="_vBDVQFqKEd64wbK5K2jm8w" source="http://www.eclipse.org/uml2/2.0.0/UML" references="_Sr5kEFeCEd6PrsI4sxIG7w"/>
        <eStructuralFeatures xmi:type="ecore:EReference" xmi:id="_vBDVQVqKEd64wbK5K2jm8w" name="base_Message" ordered="false" lowerBound="1">
          <eType xmi:type="ecore:EClass" href="http://www.eclipse.org/uml2/3.0.0/UML#//Message"/>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xmi:type="ecore:EClass" xmi:id="_vBDVQ1qKEd64wbK5K2jm8w" name="CommandMessage">
        <eAnnotations xmi:id="_vBDVRFqKEd64wbK5K2jm8w" source="http://www.eclipse.org/uml2/2.0.0/UML" references="_frSLoFeCEd6PrsI4sxIG7w"/>
        <eStructuralFeatures xmi:type="ecore:EReference" xmi:id="_vBDVRVqKEd64wbK5K2jm8w" name="base_Message" ordered="false" lowerBound="1">
          <eType xmi:type="ecore:EClass" href="http://www.eclipse.org/uml2/3.0.0/UML#//Message"/>
        </eStructuralFeatures>
      </eClassifiers>
    </contents>
    <contents xmi:type="ecore:EPackage" xmi:id="_ANaLUVeJEd6PrsI4sxIG7w" name="MVCSeq" nsURI="http:///schemas/MVCSeq/_ANY9MFeJEd6PrsI4sxIG7w/0" nsPrefix="MVCSeq">
      <eClassifiers xmi:type="ecore:EClass" xmi:id="_ANaLUleJEd6PrsI4sxIG7w" name="ViewDataPInstance">
        <eAnnotations xmi:id="_ANaLU1eJEd6PrsI4sxIG7w" source="http://www.eclipse.org/uml2/2.0.0/UML" references="_RkVfEFeCEd6PrsI4sxIG7w"/>
        <eStructuralFeatures xmi:type="ecore:EReference" xmi:id="_ANaLVFeJEd6PrsI4sxIG7w" name="base_Lifeline" ordered="false" lowerBound="1">
          <eType xmi:type="ecore:EClass" href="http://www.eclipse.org/uml2/3.0.0/UML#//Lifeline"/>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xmi:type="ecore:EClass" xmi:id="_ANaLVleJEd6PrsI4sxIG7w" name="ModelDataPInstance">
        <eAnnotations xmi:id="_ANaLV1eJEd6PrsI4sxIG7w" source="http://www.eclipse.org/uml2/2.0.0/UML" references="_RkVfEVeCEd6PrsI4sxIG7w"/>
        <eStructuralFeatures xmi:type="ecore:EReference" xmi:id="_ANaLWFeJEd6PrsI4sxIG7w" name="base_Lifeline" ordered="false" lowerBound="1">
          <eType xmi:type="ecore:EClass" href="http://www.eclipse.org/uml2/3.0.0/UML#//Lifeline"/>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xmi:type="ecore:EClass" xmi:id="_ANaLWleJEd6PrsI4sxIG7w" name="ViewUpdatePInstance">
        <eAnnotations xmi:id="_ANaLW1eJEd6PrsI4sxIG7w" source="http://www.eclipse.org/uml2/2.0.0/UML" references="_RkVfEleCEd6PrsI4sxIG7w"/>
        <eStructuralFeatures xmi:type="ecore:EReference" xmi:id="_ANaLXFeJEd6PrsI4sxIG7w" name="base_Lifeline" ordered="false" lowerBound="1">
          <eType xmi:type="ecore:EClass" href="http://www.eclipse.org/uml2/3.0.0/UML#//Lifeline"/>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xmi:type="ecore:EClass" xmi:id="_ANaLXleJEd6PrsI4sxIG7w" name="ControlUpdatePInstance">
        <eAnnotations xmi:id="_ANaLX1eJEd6PrsI4sxIG7w" source="http://www.eclipse.org/uml2/2.0.0/UML" references="_R0bwkFeCEd6PrsI4sxIG7w"/>
        <eStructuralFeatures xmi:type="ecore:EReference" xmi:id="_ANaLYFeJEd6PrsI4sxIG7w" name="base_Lifeline" ordered="false" lowerBound="1">
          <eType xmi:type="ecore:EClass" href="http://www.eclipse.org/uml2/3.0.0/UML#//Lifeline"/>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xmi:type="ecore:EClass" xmi:id="_ANaLYleJEd6PrsI4sxIG7w" name="ControlCommandPInstance">
        <eAnnotations xmi:id="_ANaLY1eJEd6PrsI4sxIG7w" source="http://www.eclipse.org/uml2/2.0.0/UML" references="_R0bwkVeCEd6PrsI4sxIG7w"/>
        <eStructuralFeatures xmi:type="ecore:EReference" xmi:id="_ANaLZFeJEd6PrsI4sxIG7w" name="base_Lifeline" ordered="false" lowerBound="1">
          <eType xmi:type="ecore:EClass" href="http://www.eclipse.org/uml2/3.0.0/UML#//Lifeline"/>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xmi:type="ecore:EClass" xmi:id="_ANaLZleJEd6PrsI4sxIG7w" name="ModelCommandPInstance">
        <eAnnotations xmi:id="_ANaLZ1eJEd6PrsI4sxIG7w" source="http://www.eclipse.org/uml2/2.0.0/UML" references="_R0bwkleCEd6PrsI4sxIG7w"/>
        <eStructuralFeatures xmi:type="ecore:EReference" xmi:id="_ANaLaFeJEd6PrsI4sxIG7w" name="base_Lifeline" ordered="false" lowerBound="1">
          <eType xmi:type="ecore:EClass" href="http://www.eclipse.org/uml2/3.0.0/UML#//Lifeline"/>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xmi:type="ecore:EClass" xmi:id="_ANaLaleJEd6PrsI4sxIG7w" name="DataMessage">
        <eAnnotations xmi:id="_ANaLa1eJEd6PrsI4sxIG7w" source="http://www.eclipse.org/uml2/2.0.0/UML" references="_SZm6MFeCEd6PrsI4sxIG7w"/>
        <eStructuralFeatures xmi:type="ecore:EReference" xmi:id="_ANaLbFeJEd6PrsI4sxIG7w" name="base_Message" ordered="false" lowerBound="1">
          <eType xmi:type="ecore:EClass" href="http://www.eclipse.org/uml2/3.0.0/UML#//Message"/>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xmi:type="ecore:EClass" xmi:id="_ANaLbleJEd6PrsI4sxIG7w" name="UpdateMessage">
        <eAnnotations xmi:id="_ANaLb1eJEd6PrsI4sxIG7w" source="http://www.eclipse.org/uml2/2.0.0/UML" references="_Sr5kEFeCEd6PrsI4sxIG7w"/>
        <eStructuralFeatures xmi:type="ecore:EReference" xmi:id="_ANaLcFeJEd6PrsI4sxIG7w" name="base_Message" ordered="false" lowerBound="1">
          <eType xmi:type="ecore:EClass" href="http://www.eclipse.org/uml2/3.0.0/UML#//Message"/>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xmi:type="ecore:EClass" xmi:id="_ANaLcleJEd6PrsI4sxIG7w" name="CommandMessage">
        <eAnnotations xmi:id="_ANaLc1eJEd6PrsI4sxIG7w" source="http://www.eclipse.org/uml2/2.0.0/UML" references="_frSLoFeCEd6PrsI4sxIG7w"/>
        <eStructuralFeatures xmi:type="ecore:EReference" xmi:id="_ANaLdFeJEd6PrsI4sxIG7w" name="base_Message" ordered="false" lowerBound="1">
          <eType xmi:type="ecore:EClass" href="http://www.eclipse.org/uml2/3.0.0/UML#//Message"/>
        </eStructuralFeatures>
      </eClassifiers>
    </contents>
  </eAnnotations>
  <elementImport xmi:id="_KJXJAFeHEd6PrsI4sxIG7w">
    <importedElement xmi:type="uml:Class" href="pathmap://UML_METAMODELS/UML.metamodel.uml#Lifeline"/>
  </elementImport>
  <elementImport xmi:id="_KJXwEFeHEd6PrsI4sxIG7w">
    <importedElement xmi:type="uml:Class" href="pathmap://UML_METAMODELS/UML.metamodel.uml#Message"/>
  </elementImport>
  <ownedRule xmi:id="_p45P4FqHEd64wbK5K2jm8w" name="ViewDataP">
    <ownedComment xmi:id="_iSfKYIeFEd60tKiFLuPNpg">
      <body>A lifeline stereotyped 'ViewDataPInstance' must exist</body>
    </ownedComment>
    <specification xmi:type="uml:OpaqueExpression" xmi:id="_qouKUFqHEd64wbK5K2jm8w">
      <language>OCL</language>
      <body>Lifeline.allInstances()->exists(lifeline|(lifeline.getAppliedStereotypes()->collect(name)->includes('ViewDataPInstance')))</body>
    </specification>
  </ownedRule>
  <ownedRule xmi:id="_344_4FqHEd64wbK5K2jm8w" name="ModelDataP">
    <specification xmi:type="uml:OpaqueExpression" xmi:id="_345m8FqHEd64wbK5K2jm8w">
      <language>OCL</language>
      <body>Lifeline.allInstances()->exists(lifeline|(lifeline.getAppliedStereotypes()->collect(name)->includes('ModelDataPInstance')) and not (lifeline.getAppliedStereotypes()->collect(name)->includes('ViewDataPInstance')))</body>
    </specification>
  </ownedRule>
  <ownedRule xmi:id="_4WxOsFqHEd64wbK5K2jm8w" name="ControlUpdateP">
    <specification xmi:type="uml:OpaqueExpression" xmi:id="_4WxOsVqHEd64wbK5K2jm8w">
      <language>OCL</language>
      <body>Lifeline.allInstances()->exists(lifeline|(lifeline.getAppliedStereotypes()->collect(name)->includes('ControlUpdatePInstance')) and not (lifeline.getAppliedStereotypes()->collect(name)->includes('ViewDataPInstance')) and not (lifeline.getAppliedStereotypes()->collect(name)->includes('ModelDataPInstance')))</body>
    </specification>
  </ownedRule>
  <ownedRule xmi:id="_4WxOslqHEd64wbK5K2jm8w" name="ViewUpdateP">
    <specification xmi:type="uml:OpaqueExpression" xmi:id="_4WxOs1qHEd64wbK5K2jm8w">
      <language>OCL</language>
      <body>Lifeline.allInstances()->exists(lifeline|(lifeline.getAppliedStereotypes()->collect(name)->includes('ViewUpdatePInstance')) and not (lifeline.getAppliedStereotypes()->collect(name)->includes('ViewDataPInstance')) and not (lifeline.getAppliedStereotypes()->collect(name)->includes('ModelDataPInstance')) and not (lifeline.getAppliedStereotypes()->collect(name)->includes('ControlUpdatePInstance')))</body>
    </specification>
  </ownedRule>
  <ownedRule xmi:id="_4s3agFqHEd64wbK5K2jm8w" name="ControlCommandP">
    <specification xmi:type="uml:OpaqueExpression" xmi:id="_4s3agVqHEd64wbK5K2jm8w">
      <language>OCL</language>
      <body>Lifeline.allInstances()->exists(lifeline|(lifeline.getAppliedStereotypes()->collect(name)->includes('ControlCommandPInstance')) and not (lifeline.getAppliedStereotypes()->collect(name)->includes('ViewDataPInstance')) and not (lifeline.getAppliedStereotypes()->collect(name)->includes('ModelDataPInstance')) and not (lifeline.getAppliedStereotypes()->collect(name)->includes('ControlUpdatePInstance')) and not (lifeline.getAppliedStereotypes()->collect(name)->includes('ViewUpdatePInstance')))</body>
    </specification>
  </ownedRule>
  <ownedRule xmi:id="_4s3aglqHEd64wbK5K2jm8w" name="ModelCommandP">
    <specification xmi:type="uml:OpaqueExpression" xmi:id="_4s3ag1qHEd64wbK5K2jm8w">
      <language>OCL</language>
      <body>Lifeline.allInstances()->exists(lifeline|(lifeline.getAppliedStereotypes()->collect(name)->includes('ModelCommandPInstance')) and not (lifeline.getAppliedStereotypes()->collect(name)->includes('ViewDataPInstance')) and not (lifeline.getAppliedStereotypes()->collect(name)->includes('ModelDataPInstance')) and not (lifeline.getAppliedStereotypes()->collect(name)->includes('ControlUpdatePInstance')) and not (lifeline.getAppliedStereotypes()->collect(name)->includes('ViewUpdatePInstance')) and not (lifeline.getAppliedStereotypes()->collect(name)->includes('ControlCommandPInstance')))</body>
    </specification>
  </ownedRule>
  <ownedRule xmi:id="_4s3ahFqHEd64wbK5K2jm8w" name="DataMessage">
    <specification xmi:type="uml:OpaqueExpression" xmi:id="_4s3ahVqHEd64wbK5K2jm8w">
      <language>OCL</language>
      <body>Message.allInstances()->exists(message|(message.getAppliedStereotypes()->collect(name)->includes('DataMessage')))</body>
    </specification>
  </ownedRule>
  <ownedRule xmi:id="_4s3ahlqHEd64wbK5K2jm8w" name="DataMessageEnds">
    <specification xmi:type="uml:OpaqueExpression" xmi:id="_4s3ah1qHEd64wbK5K2jm8w">
      <language>OCL</language>
      <body>Message.allInstances()->exists(message|(message.getAppliedStereotypes()->collect(name)->includes('DataMessage')) and message.sendEvent->size() = 1 and message.receiveEvent->size() = 1)</body>
    </specification>
  </ownedRule>
  <ownedRule xmi:id="_5FWL8FqHEd64wbK5K2jm8w" name="DataSendEvent">
    <specification xmi:type="uml:OpaqueExpression" xmi:id="_5FWL8VqHEd64wbK5K2jm8w">
      <language>OCL</language>
      <body>Message.allInstances().sendEvent->exists(m|m->collect(message)->select(mess|mess.getAppliedStereotypes()->collect(name)->includes('DataMessage'))->notEmpty() and m->collect(mend|mend.oclAsType(InteractionFragment)->collect(covered))->select(ll|ll.getAppliedStereotypes()->collect(name)->includes('ViewDataPInstance'))->notEmpty())</body>
    </specification>
  </ownedRule>
  <ownedRule xmi:id="_5FWL8lqHEd64wbK5K2jm8w" name="DataReceiveEvent">
    <specification xmi:type="uml:OpaqueExpression" xmi:id="_5FWL81qHEd64wbK5K2jm8w">
      <language>OCL</language>
      <body>Message.allInstances().receiveEvent->exists(m|m->collect(message)->select(mess|mess.getAppliedStereotypes()->collect(name)->includes('DataMessage'))->notEmpty() and m->collect(mend|mend.oclAsType(InteractionFragment)->collect(covered))->select(ll|ll.getAppliedStereotypes()->collect(name)->includes('ModelDataPInstance'))->notEmpty())</body>
    </specification>
  </ownedRule>
  <ownedRule xmi:id="_5FWL9FqHEd64wbK5K2jm8w" name="UpdateMessage">
    <specification xmi:type="uml:OpaqueExpression" xmi:id="_5FWL9VqHEd64wbK5K2jm8w">
      <language>OCL</language>
      <body>Message.allInstances()->exists(message|(message.getAppliedStereotypes()->collect(name)->includes('UpdateMessage')))</body>
    </specification>
  </ownedRule>
  <ownedRule xmi:id="_5FWL9lqHEd64wbK5K2jm8w" name="UpdateMessageEnds">
    <specification xmi:type="uml:OpaqueExpression" xmi:id="_5FWL91qHEd64wbK5K2jm8w">
      <language>OCL</language>
      <body>Message.allInstances()->exists(message|(message.getAppliedStereotypes()->collect(name)->includes('UpdateMessage')) and message.sendEvent->size() = 1 and message.receiveEvent->size() = 1)</body>
    </specification>
  </ownedRule>
  <ownedRule xmi:id="_5FWL-FqHEd64wbK5K2jm8w" name="UpdateSendEvent">
    <specification xmi:type="uml:OpaqueExpression" xmi:id="_5FWL-VqHEd64wbK5K2jm8w">
      <language>OCL</language>
      <body>Message.allInstances().sendEvent->exists(m|m->collect(message)->select(mess|mess.getAppliedStereotypes()->collect(name)->includes('UpdateMessage'))->notEmpty() and m->collect(mend|mend.oclAsType(InteractionFragment)->collect(covered))->select(ll|ll.getAppliedStereotypes()->collect(name)->includes('ControlUpdatePInstance'))->notEmpty())</body>
    </specification>
  </ownedRule>
  <ownedRule xmi:id="_5FWL-lqHEd64wbK5K2jm8w" name="UpdateReceiveEvent">
    <specification xmi:type="uml:OpaqueExpression" xmi:id="_5FWL-1qHEd64wbK5K2jm8w">
      <language>OCL</language>
      <body>Message.allInstances().receiveEvent->exists(m|m->collect(message)->select(mess|mess.getAppliedStereotypes()->collect(name)->includes('UpdateMessage'))->notEmpty() and m->collect(mend|mend.oclAsType(InteractionFragment)->collect(covered))->select(ll|ll.getAppliedStereotypes()->collect(name)->includes('ViewUpdatePInstance'))->notEmpty())</body>
    </specification>
  </ownedRule>
  <ownedRule xmi:id="_5FWL_FqHEd64wbK5K2jm8w" name="CommandMessage">
    <specification xmi:type="uml:OpaqueExpression" xmi:id="_5FWL_VqHEd64wbK5K2jm8w">
      <language>OCL</language>
      <body>Message.allInstances()->exists(message|(message.getAppliedStereotypes()->collect(name)->includes('CommandMessage')))</body>
    </specification>
  </ownedRule>
  <ownedRule xmi:id="_5FWL_lqHEd64wbK5K2jm8w" name="CommandMessageEnds">
    <specification xmi:type="uml:OpaqueExpression" xmi:id="_5FWL_1qHEd64wbK5K2jm8w">
      <language>OCL</language>
      <body>Message.allInstances()->exists(message|(message.getAppliedStereotypes()->collect(name)->includes('CommandMessage')) and message.sendEvent->size() = 1 and message.receiveEvent->size() = 1)</body>
    </specification>
  </ownedRule>
  <ownedRule xmi:id="_5h4-AFqHEd64wbK5K2jm8w" name="CommandSendEvent">
    <specification xmi:type="uml:OpaqueExpression" xmi:id="_5h4-AVqHEd64wbK5K2jm8w">
      <language>OCL</language>
      <body>Message.allInstances().sendEvent->exists(m|m->collect(message)->select(mess|mess.getAppliedStereotypes()->collect(name)->includes('CommandMessage'))->notEmpty() and m->collect(mend|mend.oclAsType(InteractionFragment)->collect(covered))->select(ll|ll.getAppliedStereotypes()->collect(name)->includes('ControlCommandPInstance'))->notEmpty())</body>
    </specification>
  </ownedRule>
  <ownedRule xmi:id="_5h4-AlqHEd64wbK5K2jm8w" name="CommandReceiveEvent">
    <specification xmi:type="uml:OpaqueExpression" xmi:id="_5h4-A1qHEd64wbK5K2jm8w">
      <language>OCL</language>
      <body>Message.allInstances().receiveEvent->exists(m|m->collect(message)->select(mess|mess.getAppliedStereotypes()->collect(name)->includes('CommandMessage'))->notEmpty() and m->collect(mend|mend.oclAsType(InteractionFragment)->collect(covered))->select(ll|ll.getAppliedStereotypes()->collect(name)->includes('ModelCommandPInstance'))->notEmpty())</body>
    </specification>
  </ownedRule>
  <ownedRule xmi:id="_5h4-BFqHEd64wbK5K2jm8w" name="ViewDataP=ModelDataP">
    <specification xmi:type="uml:OpaqueExpression" xmi:id="_5h4-BVqHEd64wbK5K2jm8w">
      <language>OCL</language>
      <body>let occurrs : Bag(InteractionFragment) = Lifeline.allInstances()->select(let stereos1 : Bag(String) = getAppliedStereotypes()->collect(name) in stereos1->includes('ControlUpdatePInstance') or stereos1->includes('ViewUpdatePInstance') or stereos1->includes('ControlCommandPInstance') or stereos1->includes('ModelCommandPInstance'))->collect(coveredBy), mend : Bag(InteractionFragment) = Lifeline.allInstances()->select(let stereos2 : Bag(String) = getAppliedStereotypes()->collect(name) in stereos2->includes('ViewDataPInstance'))->collect(coveredBy) in not Message.allInstances()->exists(mess|mend->exists(nm1|mess.sendEvent.oclAsType(InteractionFragment)->includes(nm1)) and occurrs->exists(nm2|mess.receiveEvent.oclAsType(InteractionFragment)->includes(nm2))) and not Message.allInstances()->exists(mess|mend->exists(nm3|mess.receiveEvent.oclAsType(InteractionFragment)->includes(nm3)) and occurrs->exists(nm4|mess.sendEvent.oclAsType(InteractionFragment)->includes(nm4)))</body>
    </specification>
  </ownedRule>
  <ownedRule xmi:id="_5h4-BlqHEd64wbK5K2jm8w" name="ModelDataP=ViewDataP">
    <specification xmi:type="uml:OpaqueExpression" xmi:id="_5h4-B1qHEd64wbK5K2jm8w">
      <language>OCL</language>
      <body>let occurrs : Bag(InteractionFragment) = Lifeline.allInstances()->select(let stereos1 : Bag(String) = getAppliedStereotypes()->collect(name) in stereos1->includes('ControlUpdatePInstance') or stereos1->includes('ViewUpdatePInstance') or stereos1->includes('ControlCommandPInstance') or stereos1->includes('ModelCommandPInstance'))->collect(coveredBy), mend : Bag(InteractionFragment) = Lifeline.allInstances()->select(let stereos2 : Bag(String) = getAppliedStereotypes()->collect(name) in stereos2->includes('ModelDataPInstance'))->collect(coveredBy) in not Message.allInstances()->exists(mess|mend->exists(nm1|mess.sendEvent.oclAsType(InteractionFragment)->includes(nm1)) and occurrs->exists(nm2|mess.receiveEvent.oclAsType(InteractionFragment)->includes(nm2))) and not Message.allInstances()->exists(mess|mend->exists(nm3|mess.receiveEvent.oclAsType(InteractionFragment)->includes(nm3)) and occurrs->exists(nm4|mess.sendEvent.oclAsType(InteractionFragment)->includes(nm4)))</body>
    </specification>
  </ownedRule>
  <ownedRule xmi:id="_5h4-CFqHEd64wbK5K2jm8w" name="ControlUpdateP=ViewUpdateP">
    <specification xmi:type="uml:OpaqueExpression" xmi:id="_5h4-CVqHEd64wbK5K2jm8w">
      <language>OCL</language>
      <body>let occurrs : Bag(InteractionFragment) = Lifeline.allInstances()->select(let stereos1 : Bag(String) = getAppliedStereotypes()->collect(name) in stereos1->includes('ViewDataPInstance') or stereos1->includes('ModelDataPInstance') or stereos1->includes('ControlCommandPInstance') or stereos1->includes('ModelCommandPInstance'))->collect(coveredBy), mend : Bag(InteractionFragment) = Lifeline.allInstances()->select(let stereos2 : Bag(String) = getAppliedStereotypes()->collect(name) in stereos2->includes('ControlUpdatePInstance'))->collect(coveredBy) in not Message.allInstances()->exists(mess|mend->exists(nm1|mess.sendEvent.oclAsType(InteractionFragment)->includes(nm1)) and occurrs->exists(nm2|mess.receiveEvent.oclAsType(InteractionFragment)->includes(nm2))) and not Message.allInstances()->exists(mess|mend->exists(nm3|mess.receiveEvent.oclAsType(InteractionFragment)->includes(nm3)) and occurrs->exists(nm4|mess.sendEvent.oclAsType(InteractionFragment)->includes(nm4)))</body>
    </specification>
  </ownedRule>
  <ownedRule xmi:id="_5h4-ClqHEd64wbK5K2jm8w" name="ViewUpdateP=ControlUpdateP">
    <specification xmi:type="uml:OpaqueExpression" xmi:id="_5h4-C1qHEd64wbK5K2jm8w">
      <language>OCL</language>
      <body>let occurrs : Bag(InteractionFragment) = Lifeline.allInstances()->select(let stereos1 : Bag(String) = getAppliedStereotypes()->collect(name) in stereos1->includes('ViewDataPInstance') or stereos1->includes('ModelDataPInstance') or stereos1->includes('ControlCommandPInstance') or stereos1->includes('ModelCommandPInstance'))->collect(coveredBy), mend : Bag(InteractionFragment) = Lifeline.allInstances()->select(let stereos2 : Bag(String) = getAppliedStereotypes()->collect(name) in stereos2->includes('ViewUpdatePInstance'))->collect(coveredBy) in not Message.allInstances()->exists(mess|mend->exists(nm1|mess.sendEvent.oclAsType(InteractionFragment)->includes(nm1)) and occurrs->exists(nm2|mess.receiveEvent.oclAsType(InteractionFragment)->includes(nm2))) and not Message.allInstances()->exists(mess|mend->exists(nm3|mess.receiveEvent.oclAsType(InteractionFragment)->includes(nm3)) and occurrs->exists(nm4|mess.sendEvent.oclAsType(InteractionFragment)->includes(nm4)))</body>
    </specification>
  </ownedRule>
  <ownedRule xmi:id="_5h4-DFqHEd64wbK5K2jm8w" name="ControlCommandP=ModelCommandP">
    <specification xmi:type="uml:OpaqueExpression" xmi:id="_5h4-DVqHEd64wbK5K2jm8w">
      <language>OCL</language>
      <body>let occurrs : Bag(InteractionFragment) = Lifeline.allInstances()->select(let stereos1 : Bag(String) = getAppliedStereotypes()->collect(name) in stereos1->includes('ViewDataPInstance') or stereos1->includes('ModelDataPInstance') or stereos1->includes('ControlUpdatePInstance') or stereos1->includes('ViewUpdatePInstance'))->collect(coveredBy), mend : Bag(InteractionFragment) = Lifeline.allInstances()->select(let stereos2 : Bag(String) = getAppliedStereotypes()->collect(name) in stereos2->includes('ControlCommandPInstance'))->collect(coveredBy) in not Message.allInstances()->exists(mess|mend->exists(nm1|mess.sendEvent.oclAsType(InteractionFragment)->includes(nm1)) and occurrs->exists(nm2|mess.receiveEvent.oclAsType(InteractionFragment)->includes(nm2))) and not Message.allInstances()->exists(mess|mend->exists(nm3|mess.receiveEvent.oclAsType(InteractionFragment)->includes(nm3)) and occurrs->exists(nm4|mess.sendEvent.oclAsType(InteractionFragment)->includes(nm4)))</body>
    </specification>
  </ownedRule>
  <ownedRule xmi:id="_5h4-DlqHEd64wbK5K2jm8w" name="ModelCommandP=ControlCommandP">
    <specification xmi:type="uml:OpaqueExpression" xmi:id="_5h4-D1qHEd64wbK5K2jm8w">
      <language>OCL</language>
      <body>let occurrs : Bag(InteractionFragment) = Lifeline.allInstances()->select(let stereos1 : Bag(String) = getAppliedStereotypes()->collect(name) in stereos1->includes('ViewDataPInstance') or stereos1->includes('ModelDataPInstance') or stereos1->includes('ControlUpdatePInstance') or stereos1->includes('ViewUpdatePInstance'))->collect(coveredBy), mend : Bag(InteractionFragment) = Lifeline.allInstances()->select(let stereos2 : Bag(String) = getAppliedStereotypes()->collect(name) in stereos2->includes('ModelCommandPInstance'))->collect(coveredBy) in not Message.allInstances()->exists(mess|mend->exists(nm1|mess.sendEvent.oclAsType(InteractionFragment)->includes(nm1)) and occurrs->exists(nm2|mess.receiveEvent.oclAsType(InteractionFragment)->includes(nm2))) and not Message.allInstances()->exists(mess|mend->exists(nm3|mess.receiveEvent.oclAsType(InteractionFragment)->includes(nm3)) and occurrs->exists(nm4|mess.sendEvent.oclAsType(InteractionFragment)->includes(nm4)))</body>
    </specification>
  </ownedRule>
  <packagedElement xmi:type="uml:Stereotype" xmi:id="_RkVfEFeCEd6PrsI4sxIG7w" name="ViewDataPInstance">
    <ownedAttribute xmi:id="_SjF0EVeHEd6PrsI4sxIG7w" name="base_Lifeline" association="_SjFNAFeHEd6PrsI4sxIG7w">
      <type xmi:type="uml:Class" href="pathmap://UML_METAMODELS/UML.metamodel.uml#Lifeline"/>
    </ownedAttribute>
  </packagedElement>
  <packagedElement xmi:type="uml:Stereotype" xmi:id="_RkVfEVeCEd6PrsI4sxIG7w" name="ModelDataPInstance">
    <ownedAttribute xmi:id="_TrGlAleHEd6PrsI4sxIG7w" name="base_Lifeline" association="_TrGlAFeHEd6PrsI4sxIG7w">
      <type xmi:type="uml:Class" href="pathmap://UML_METAMODELS/UML.metamodel.uml#Lifeline"/>
    </ownedAttribute>
  </packagedElement>
  <packagedElement xmi:type="uml:Stereotype" xmi:id="_RkVfEleCEd6PrsI4sxIG7w" name="ViewUpdatePInstance">
    <ownedAttribute xmi:id="_U61HgleHEd6PrsI4sxIG7w" name="base_Lifeline" association="_U61HgFeHEd6PrsI4sxIG7w">
      <type xmi:type="uml:Class" href="pathmap://UML_METAMODELS/UML.metamodel.uml#Lifeline"/>
    </ownedAttribute>
  </packagedElement>
  <packagedElement xmi:type="uml:Stereotype" xmi:id="_R0bwkFeCEd6PrsI4sxIG7w" name="ControlUpdatePInstance">
    <ownedAttribute xmi:id="_V_m-QVeHEd6PrsI4sxIG7w" name="base_Lifeline" association="_V_mXMFeHEd6PrsI4sxIG7w">
      <type xmi:type="uml:Class" href="pathmap://UML_METAMODELS/UML.metamodel.uml#Lifeline"/>
    </ownedAttribute>
  </packagedElement>
  <packagedElement xmi:type="uml:Stereotype" xmi:id="_R0bwkVeCEd6PrsI4sxIG7w" name="ControlCommandPInstance">
    <ownedAttribute xmi:id="_XZ2usleHEd6PrsI4sxIG7w" name="base_Lifeline" association="_XZ2usFeHEd6PrsI4sxIG7w">
      <type xmi:type="uml:Class" href="pathmap://UML_METAMODELS/UML.metamodel.uml#Lifeline"/>
    </ownedAttribute>
  </packagedElement>
  <packagedElement xmi:type="uml:Stereotype" xmi:id="_R0bwkleCEd6PrsI4sxIG7w" name="ModelCommandPInstance">
    <ownedAttribute xmi:id="_YzgCMFeHEd6PrsI4sxIG7w" name="base_Lifeline" association="_YzfbIFeHEd6PrsI4sxIG7w">
      <type xmi:type="uml:Class" href="pathmap://UML_METAMODELS/UML.metamodel.uml#Lifeline"/>
    </ownedAttribute>
  </packagedElement>
  <packagedElement xmi:type="uml:Stereotype" xmi:id="_SZm6MFeCEd6PrsI4sxIG7w" name="DataMessage">
    <ownedAttribute xmi:id="_bK7MkVeHEd6PrsI4sxIG7w" name="base_Message" association="_bK6lgFeHEd6PrsI4sxIG7w">
      <type xmi:type="uml:Class" href="pathmap://UML_METAMODELS/UML.metamodel.uml#Message"/>
    </ownedAttribute>
  </packagedElement>
  <packagedElement xmi:type="uml:Stereotype" xmi:id="_Sr5kEFeCEd6PrsI4sxIG7w" name="UpdateMessage">
    <ownedAttribute xmi:id="_cMKAEFeHEd6PrsI4sxIG7w" name="base_Message" association="_cMJZAFeHEd6PrsI4sxIG7w">
      <type xmi:type="uml:Class" href="pathmap://UML_METAMODELS/UML.metamodel.uml#Message"/>
    </ownedAttribute>
  </packagedElement>
  <packagedElement xmi:type="uml:Stereotype" xmi:id="_frSLoFeCEd6PrsI4sxIG7w" name="CommandMessage">
    <ownedAttribute xmi:id="_dNwnAleHEd6PrsI4sxIG7w" name="base_Message" association="_dNwnAFeHEd6PrsI4sxIG7w">
      <type xmi:type="uml:Class" href="pathmap://UML_METAMODELS/UML.metamodel.uml#Message"/>
    </ownedAttribute>
  </packagedElement>
  <packagedElement xmi:type="uml:Extension" xmi:id="_SjFNAFeHEd6PrsI4sxIG7w" name="Lifeline_ViewDataPInstance" memberEnd="_SjF0EFeHEd6PrsI4sxIG7w _SjF0EVeHEd6PrsI4sxIG7w">
    <ownedEnd xmi:type="uml:ExtensionEnd" xmi:id="_SjF0EFeHEd6PrsI4sxIG7w" name="extension_ViewDataPInstance" type="_RkVfEFeCEd6PrsI4sxIG7w" aggregation="composite" association="_SjFNAFeHEd6PrsI4sxIG7w"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Extension" xmi:id="_TrGlAFeHEd6PrsI4sxIG7w" name="Lifeline_ModelDataPInstance" memberEnd="_TrGlAVeHEd6PrsI4sxIG7w _TrGlAleHEd6PrsI4sxIG7w">
    <ownedEnd xmi:type="uml:ExtensionEnd" xmi:id="_TrGlAVeHEd6PrsI4sxIG7w" name="extension_ModelDataPInstance" type="_RkVfEVeCEd6PrsI4sxIG7w" aggregation="composite" association="_TrGlAFeHEd6PrsI4sxIG7w"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Extension" xmi:id="_U61HgFeHEd6PrsI4sxIG7w" name="Lifeline_ViewUpdatePInstance" memberEnd="_U61HgVeHEd6PrsI4sxIG7w _U61HgleHEd6PrsI4sxIG7w">
    <ownedEnd xmi:type="uml:ExtensionEnd" xmi:id="_U61HgVeHEd6PrsI4sxIG7w" name="extension_ViewUpdatePInstance" type="_RkVfEleCEd6PrsI4sxIG7w" aggregation="composite" association="_U61HgFeHEd6PrsI4sxIG7w"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Extension" xmi:id="_V_mXMFeHEd6PrsI4sxIG7w" name="Lifeline_ControlUpdatePInstance" memberEnd="_V_m-QFeHEd6PrsI4sxIG7w _V_m-QVeHEd6PrsI4sxIG7w">
    <ownedEnd xmi:type="uml:ExtensionEnd" xmi:id="_V_m-QFeHEd6PrsI4sxIG7w" name="extension_ControlUpdatePInstance" type="_R0bwkFeCEd6PrsI4sxIG7w" aggregation="composite" association="_V_mXMFeHEd6PrsI4sxIG7w"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Extension" xmi:id="_XZ2usFeHEd6PrsI4sxIG7w" name="Lifeline_ControlCommandPInstance" memberEnd="_XZ2usVeHEd6PrsI4sxIG7w _XZ2usleHEd6PrsI4sxIG7w">
    <ownedEnd xmi:type="uml:ExtensionEnd" xmi:id="_XZ2usVeHEd6PrsI4sxIG7w" name="extension_ControlCommandPInstance" type="_R0bwkVeCEd6PrsI4sxIG7w" aggregation="composite" association="_XZ2usFeHEd6PrsI4sxIG7w"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Extension" xmi:id="_YzfbIFeHEd6PrsI4sxIG7w" name="Lifeline_ModelCommandPInstance" memberEnd="_YzfbIVeHEd6PrsI4sxIG7w _YzgCMFeHEd6PrsI4sxIG7w">
    <ownedEnd xmi:type="uml:ExtensionEnd" xmi:id="_YzfbIVeHEd6PrsI4sxIG7w" name="extension_ModelCommandPInstance" type="_R0bwkleCEd6PrsI4sxIG7w" aggregation="composite" association="_YzfbIFeHEd6PrsI4sxIG7w"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Extension" xmi:id="_bK6lgFeHEd6PrsI4sxIG7w" name="Message_DataMessage" memberEnd="_bK7MkFeHEd6PrsI4sxIG7w _bK7MkVeHEd6PrsI4sxIG7w">
    <ownedEnd xmi:type="uml:ExtensionEnd" xmi:id="_bK7MkFeHEd6PrsI4sxIG7w" name="extension_DataMessage" type="_SZm6MFeCEd6PrsI4sxIG7w" aggregation="composite" association="_bK6lgFeHEd6PrsI4sxIG7w"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Extension" xmi:id="_cMJZAFeHEd6PrsI4sxIG7w" name="Message_UpdateMessage" memberEnd="_cMJZAVeHEd6PrsI4sxIG7w _cMKAEFeHEd6PrsI4sxIG7w">
    <ownedEnd xmi:type="uml:ExtensionEnd" xmi:id="_cMJZAVeHEd6PrsI4sxIG7w" name="extension_UpdateMessage" type="_Sr5kEFeCEd6PrsI4sxIG7w" aggregation="composite" association="_cMJZAFeHEd6PrsI4sxIG7w"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Extension" xmi:id="_dNwnAFeHEd6PrsI4sxIG7w" name="Message_CommandMessage" memberEnd="_dNwnAVeHEd6PrsI4sxIG7w _dNwnAleHEd6PrsI4sxIG7w">
    <ownedEnd xmi:type="uml:ExtensionEnd" xmi:id="_dNwnAVeHEd6PrsI4sxIG7w" name="extension_CommandMessage" type="_frSLoFeCEd6PrsI4sxIG7w" aggregation="composite" association="_dNwnAFeHEd6PrsI4sxIG7w"/>
  </packagedElement>
</uml:Profile>
